import os

import stat_attributes as attributes
from services import readTextFileAtOnce, toPosixPath
from stat_configuration import StatConfiguration
from stat_makefile import StatMakefile
from build_tools import BuildTools
from tests.testing_tools import FileBasedTestCase, Mock, PropertyMock, call

CUT = StatConfiguration.__module__


class TestStatConfiguration(FileBasedTestCase):
    def setupCommon(self):
        self.tools = Mock(spec=BuildTools)

    def tearDown(self):
        StatConfiguration.clear()


class TestStatConfigurationDefault(TestStatConfiguration):

    def setUp(self):
        self.setupCommon()
        self.config = StatConfiguration()

    def test__new__isSingleton(self):
        self.assertEqual(self.config, StatConfiguration())

    def test___init__basics(self):
        config = StatConfiguration()
        self.assertEqual(attributes.VERSION, config['TOOL_VERSION'])
        self.assertEqual(toPosixPath(attributes.OUTPUT_DIRECTORY), toPosixPath(config['OUTPUT_DIR']))
        self.assertEqual(toPosixPath(os.path.relpath(attributes.TOOL_PATH)), toPosixPath(config['STAT_ROOT']))
        self.assertEqual(toPosixPath(attributes.DUMMIES_DIRECTORY), toPosixPath(config['DUMMIES_DIR']))

    def test_products(self):
        config = StatConfiguration()
        expected = ['product', 'product_derived']
        self.assertSameItems(expected, config.products)

    def test_defaultProduct(self):
        config = StatConfiguration()
        self.assertEqual(None, config.defaultProduct)
        self.assertTrue(config.isStale())


VALID_PRODUCT = 'product_derived'
TEST_CONTENTS = '# Makfile generated by STAT\nTOOL_VERSION = {0}\nCONFIG_VERSION = {1}\nPRODUCT_FLAVOR = {2}'
CONFIG_FILE_TIME = 1234567.89


class TestStatConfigurationWithFiles(TestStatConfiguration):

    def setUp(self):
        self.setupCommon()
        self.isFile = self.patch(CUT, 'os.path.isfile', return_value=True)
        statMakefile = dict(TEST_VARIABLE='Hello universe!', MSVS_VERSION='2008')
        self.statMakefile = self.patch(CUT, StatMakefile.__name__, return_value=statMakefile)
        autoGeneratedFile = TEST_CONTENTS.format(attributes.VERSION, CONFIG_FILE_TIME, VALID_PRODUCT)
        self.readTextFileAtOnce = self.patch(CUT, readTextFileAtOnce.__name__, return_value=autoGeneratedFile)
        osStat = Mock()
        type(osStat).st_mtime = PropertyMock(return_value=CONFIG_FILE_TIME)
        self.osStat = self.patch(CUT, 'os.stat', return_value=osStat)

    def test___init__basics(self):
        config = StatConfiguration()
        self.assertEqual(attributes.VERSION, config['TOOL_VERSION'])
        self.assertCalls(self.statMakefile, [call(attributes.CONFIG_FILENAME)])
        self.assertEqual("Hello universe!", config['TEST_VARIABLE'])
        self.assertEqual(2008, config.getInt('MSVS_VERSION', 0))
        self.assertCalls(self.isFile, [call(os.path.join(attributes.PRODUCT_DIRECTORY, attributes.IGNORE_FILENAME)),
                                       call(attributes.CONFIG_FILENAME), call(attributes.AUTO_GENERATED_MAKEFILE)])
        self.assertCalls(self.statMakefile, [call(attributes.CONFIG_FILENAME)])
        self.assertCalls(self.readTextFileAtOnce, [call(attributes.AUTO_GENERATED_MAKEFILE)])

    def test_defaultProductExplicitlySpecified(self):
        config = StatConfiguration()
        self.assertEqual(VALID_PRODUCT, config.defaultProduct)
        self.assertFalse(config.isStale())

    def test_defaultProductInvalidSpecified(self):
        autoGeneratedFile = TEST_CONTENTS.format(attributes.VERSION, CONFIG_FILE_TIME, 'some_invalid_product')
        self.readTextFileAtOnce.return_value = autoGeneratedFile

        config = StatConfiguration()
        self.assertIsNone(config.defaultProduct)
        self.assertTrue(config.isStale())

    def test_isStaleUponVersionChange(self):
        autoGeneratedFile = TEST_CONTENTS.format(attributes.VERSION + '.19', CONFIG_FILE_TIME, VALID_PRODUCT)
        self.readTextFileAtOnce.return_value = autoGeneratedFile

        config = StatConfiguration()
        self.assertTrue(config.isStale())

    def test_isStaleUponUserConfigurationChange(self):
        autoGeneratedFile = TEST_CONTENTS.format(attributes.VERSION, CONFIG_FILE_TIME - 0.1, VALID_PRODUCT)
        self.readTextFileAtOnce.return_value = autoGeneratedFile

        config = StatConfiguration()
        self.assertTrue(config.isStale())

    def test_isStaleUponAutoWithoutConfigVersion(self):
        newContents = (TEST_CONTENTS[:]).replace('CONFIG_VERSION', 'SOME_OTHER_FIELD')
        autoGeneratedFile = newContents.format(attributes.VERSION, CONFIG_FILE_TIME, VALID_PRODUCT)
        self.readTextFileAtOnce.return_value = autoGeneratedFile

        config = StatConfiguration()
        self.assertTrue(config.isStale())
